% อธิบายรายละเอียดเกี่ยวกับความรู้พื้นฐานด้านต่าง ๆ ที่เกี่ยวข้องกับเนื้องาน
% รวมทั้งกล่าวถึงงานที่มีคนพัฒนามาก่อนที่มีลักษณะใกล้เคียงกันโดยวิเคราะห์ข้อดีข้อเสียด้วย
% แยกเป็นหัวข้อตามความเหมาะสมของโครงงาน

% การแยกหัวข้อนี้เป็นเพียงตัวอย่างสำหรับตัวอย่างโครงงานหนึ่งเท่านั้น

ในการดำเนินการจัดทำโครงการ เรื่อง ระบบควบคุมเครื่องใช้ไฟฟ้าภายในบ้านผ่านแอปพลิเคชัน ผู้จัดทำได้ทำศึกษาหลักการทฤษฏี และเทคโนโลยีต่าง ๆ ที่เกี่ยวข้องกับ
ความสามารนำมาประยุกต์ใช้ในการพัฒนาระบบ ซึ่งประกอบไปด้วยหัวข้อต่าง ๆ ดังนี้


[[section: Python Language]]
	ภาษาไพธอน(Python)เป็นภาษาโปรแกรมระดับสูงที่มีจุดเด่นคือมีโครงสร้างที่ไม่ซับซ้อนทำให้ง่ายต่อการเรียนรู้และการใช้งาน  และยังเป็นภาษาที่ใช้เขียนสคริปท์ให้กับการทำงานของ Raspberry Pi 3 นอกจากนี้ยังมีเฟรมเวิร์ค(Framework)ที่สามารถใช้สร้างเว็บเซอร์วิส(Web Service)บน Raspberry Pi 3 ได้คือ Flask Framework
	[[subsection: Flask Framework]]
	Flask เป็นเฟรมเวิร์คหนึ่งของภาษาไพธอน ที่ช่วยให้เราสามารถเขียน python web application ได้ ซึ่งจุดเด่นของ Flask คือความเรียบง่ายและความยืดหยุ่น และเหมาะสำหรับแอพพลิเคชั่นที่ทำงานหน้าเดียว โดยจะมีตัวอย่างดังนี้ 
	
	\newpage


	[[code]]
from flask import Flask
app = Flask(__name__)

@app.route("/on_air/")
def on_air():
   rtn =subprocess.call(["irsend", "SENDONCE", "REMOTEAIR", "AIRON"])

if __name__ == "__main__":
    app.run(host='0.0.0.0')

[[end]]

จากตัวอย่างด้านบน เมื่อรันแล้วจะได้เว็บเซอร์วิสที่สามรถเรียกใช้ผ่าน URL เช่นต้องการเรียกใช้งานฟังก์ชัน(Function) on\_air ก็สามารถเรียก http://<ip address>:5000/on\_air และหากต้องการเพิ่มการเรียกใช้งานเพิ่มเติม ก็สารามารถเพิ่ม @app.route("/pathที่ต้องการ") ได้เลย 


[[section: Android]]
	แอนดรอยด์เป็นระบบปฏิบัติการบนอุปกรณ์พกพาซึ่งเป็นแบบโอเพนซอร์ซ(Open Source) โดยสามารถนำไปพัฒนาเพิ่มเติมเสริมแต่งได้ โดยสามารถสร้างแอปพลิเคชันจากภาษาโปรแกรมจาวา(Java) และภาษาโปรแกรมเอกซ์เอ็มแอล(XML)
	 [[subsection: Java Language]]
	ภาษาโปรแกรมจาวาเป็นภาษาสำหรับเขียนโปรแกรมที่เป็นรูปแบบโครงสร้างแบบ OOP(Object-Oriented Programming) โดยเขียนในรูปแบบคลาส(Class)ซึ่งแต่ละคลาสจะมีเมทอด(Method)เป็นของตนเอง ซึ่งในการเขียนแอปพลิเคชันจะเขียน Activity แยกเป็นคลาส โดยสามารถแต่ละ Activity จะเขียนส่วนของการทำงานในแอปพลิเคชันแต่ละหน้าได้ ซึ่งใช้ Android Studio ในการพัฒนา

	[[subsection: XML Language]]
	ภาษาเอกซ์เอ็มแอล(Extensible Markup Language) เป็นภาษาที่โครงสร้างคล้ายภาษา HTML คือมีแท็ก(Tag)ปิดและแท็กเปิดแล้วข้างในก็จะมีแอททริบิวต์(Attribute)ต่าง ๆ ของแท็กนั้น ซึ่งสามารถนำไปใช้ในการสร้าง layout ก็คือรูปร่างหน้าตาของแอนดรอยด์แอปพลิเคชันได้โดยมีโค้ดตัวอย่างดังนี้
    [[code]]
    <TextView
        android:layout_width="200dp"
        android:layout_height="50dp"
        android:text="TextView1"
        android:textSize="20dp"
        android:layout_margin="15dp"/>
    [[end]]


[[subsection: ListView]]
	ListView เป็น ไลบรารี่(Library) ที่ช่วยจัดการในการแสดงข้อมูลที่เป็นลิสต์(List) ให้แสดงเป็นแถว(Row) ซึ่งแต่ละแถวจะมี layout ตามที่ออกแบบไว้ โดยมีตัวอย่างดังนี้

โค้ดตัวอย่างของการจองพื้นนี้ให้ listview ในไฟล์ .xml
[[code]]
<ListView
            android:id="@+id/listView"
            android:layout_width = "500dp"
            android:layout_height ="500dp">
</ListView>
[[end]]


โค้ดตัวอย่างของการจัดการการแสดงผลใน listview
[[code]]
public class listAdapter extends BaseAdapter {
    @Override
    public int getCount() {
        return 0;
    }

    @Override
    public Object getItem(int position) {
        return null;
    }

    @Override
    public long getItemId(int position) {
        return 0;
    }
[[end]]
[[code]]
    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        return null;
    }
}
[[end]]
 


โค้ดตัวอย่างของการเรียกใช้ listview มาทำงานในภาษาจาวาและแสดงผล
[[code]]
 ListView listView = (ListView) rootView.findViewById(R.id.listView);
 ListAdapter listAdapter = new ListAdapter();
 listView.setAdapter(listAdapter);
[[end]]

[[subsection: Android Voice Recognition]]

    Android Voice Recognition คือการที่นำเสียงของผู้ใช้มาประมวลผล เพื่อทำให้รับรู้ได้ว่าผู้ใช้นั้นพูดคำว่าอะไร ซึ่งในระบบของแอนดรอยด์จะมีไลบรารี่ที่พัฒนาโดย Google โดยสามารถทำตาม[[cite(Voice)]] ซึ่งเมื่อทำแล้วจะได้ผลลัพท์ออกมาเป็น ข้อความซึ่งเป็นชนิดสตริงตามเสียงที่ได้รับการประมวลผลออกมา


[[section: iOS]]
	ไอโอเอสเป็นระบบปฏิบัติการบนอุปกรณ์พกพาซึ่ง พัฒนาและจำหน่ายโดยบริษัทแอปเปิ้ล ซึ่งมี HomeKit เป็นแพลตฟอร์ม(Platform)หนึ่งของระบบปฏิบัติการไอโอเอส เพื่อใช้ในการสื่อสารและควบคุมอุปกรณ์ไฟฟ้าภายในบ้านผ่าน Siri โดยใช้โปรโตคอล(Protocol)ชื่อว่า HomeKit Accessory Protocol ซึ่งเป็นโปรโตคอลเฉพาะที่ใช้ในการสื่อสารกับเว็บเซอร์วิสที่สพัฒนาจาก Node JSซึ่งเป็นแพลตฟอร์มของภาษาจาวาสคริป(JavaScript)



[[section: Firebase Realtime Database ]]
	เป็นฐานข้อมูลที่มีลักษณะ NoSQL Cloud Database คือการเก็บข้อมูลที่ไม่เป็นรูปแบบตายตัว ข้อดีคือสามารถแก้ไขรูปแบบได้ง่ายไม่กระทบกับข้อมูลเดิม โดยเก็บข้อมูลในรูปแบบของเจสัน(JSON) และมีการ sync ข้อมูลแบบ real time กับทุกอุปกรณ์ที่เชื่อมต่อแบบอัตโนมัติในเสี้ยววินาที นอกจากนี้ยังมีระบบ Authentication โดยอีเมลล์, Google Account และอื่น ๆ ทำให้สามารถใช้งานได้ง่ายมากขึ้น [[cite(Firebase)]] ซึ่งมีโครงสร้างดังภาพที่ 2.1 และมีตัวอย่างการใช้งานใน Android Studio ดังนี้

	โค้ดในส่วนของการอ่านข้อมูลจาก firebase เข้าแอพพลิเคชัน
[[code]]
mRootRef.addListenerForSingleValueEvent(new ValueEventListener() {
@Override
public void onDataChange(DataSnapshot dataSnapshot) {
//To do here     
}
@Override
public void onCancelled(DatabaseError databaseError) {
//To do here 
}
});
[[end]]

โค้ดในส่วนของการเชื่อมต่อแอพพลิเคชัน
[[code]]
DatabaseReference mRootRef = FirebaseDatabase.getInstance().getReference();
[[end]]

โค้ดในส่วนของการเขียนข้อมูลลง firebase 
[[code]]
mRootRef.setValue();
[[end]]
	[[image(firebase):firebase.png|width=1|caption=โครงสร้างข้อมูลของ Firebase]]

	ซึ่งการอ่านข้อมูลหรือการเขียนข้อมูลใน firebase จะต้องทำข้อมูลให้เป็นฟอร์แมตใดก็ได้ โดยในการเขียนการอ่านจะต้องใช้ฟอร์แมตเดียวกันเท่านั้นซึ่งในโครงงานนี้จะใช้ฟอร์แมตเจสันที่สามารถอ่านเข้าใจได้ง่าย

[[section: Raspberry Pi]]
	Raspberry Pi เป็นบอร์ดคอมพิวเตอร์ที่มีขนาดเล็กซึ่งสามารถนำมาเขียนโปรแกรมควบคุมอุปกรณ์อิเล็กทรอนิกส์โดยมีขา GPIO เป็นส่วนเชื่อมต่อกับอุปกรณ์ ซึ่ง Raspberry Pi จะรองรับระบบปฎิบัติการลินุกซ์(Linux) เช่น Raspbian เป็นต้น โดยข้อมูลทั้งหมดจะถูกเก็บไว้ในความจำที่เป็น SD Card ซึ่งมีลักษณะดังภาพ 2.2


[[image(raspberrypi):raspberrypi.png|width=0.8|caption=Raspberry Pi]]

[[section: Light Dependent Resistor]]

LDR เป็นตัวต้านทานชนิดหนึ่งซึ่งนำมาใช้เป็นเซนเซอร์วัดแสง โดยมีหลักการคือ เมื่อมีแสงมาตกกระทบมากจะทำให้มีค่าความต้านทานสน้อย แต่ถ้ามีแสงมาตกกระทบน้อยจะทำให้มีค่าความต้านทานมาก ซึ่งมีลักษณะและข้อมูลของแต่ละขาดังภาพ 2.3

[[image(LDR):LDR.jpg|width=0.6|caption=Light Dependent Resistor]]
[[section: ไอซีเบอร์ DS1820]]

DS1820 เป็นชิบที่นำมาต่อกับบอร์ดอิเล็กทรอนิกส์เพื่อวัดอุณหภูมิแบบดิจิตอล ซึ่งเมื่อวัดจะได้ค่าออกมาเป็นหน่วยองศาเซลเซียส(C) โดยสามารถไฟเลี้ยงได้ตั้งแต่ 3-5V ซึ่งมีลักษณะดังภาพ 2.4
[[image(icds1802):icds18202.gif|width=0.6|caption=ไอซีเบอร์ DS1820]]
[[section: รีเลย์ (Relay) ]]
    เป็นโมดูลที่นำมาใช้เหมือนกับสวิตช์ก็คือเปิดหรือปิดกระแสไฟฟ้าโดยมีลักษณะดังภาพ 2.5 โดยวิธีการใช้คือการป้อนกระแสไฟฟ้าที่ต้องการใช้ในอุปกรณ์นั้น ๆ ที่จุด C(Common) แล้วนำสายกระแสไฟของอุปกรณ์ที่ต้องการมาต่อกับจุด NC(Normal Close) จากนั้นต่อสายดินกับ NO(Normal Open) ซึ่งมีตัวอย่างดังภาพ 2.6

[[image(relay):relay.jpg|width=0.6|caption=รีเลย์ (Relay)]]

[[image(relayCircuit):relayCircuit.jpg|width=0.6|caption=Relay Circuit]]

[[section: Arduino]]
Arduino เป็นบอร์ดไมโครคอนโทรเลอร์มีลักษณะดังภาพที่ 2.7 ซึ่งมาใช้งานในการพัฒนาโปรแกรม ซึ่งสามารถสั่งอุปกรณ์เสริมต่าง ๆ โดยผ่านขาต่าง ๆ ที่เป็นแบบดิจิตอล และอนาล็อค ซึ่งการจะเขียนโปรแกรมลงบอร์ดนั้นสามารถเขียนโค้ดในโปรแกรม ArduinoIDE ซึ่งจะใช้ภาษาซี(C)หรือภาษาซีพลัสพลัส(C++) แล้วทำการเบิร์น(Burn)หรือการลงโปรแกรมลงไปให้บอร์ดทำงานตามที่โค้ดได้เขียนไว้

[[image(android1):arduino.jpg|width=0.5|caption=Anduino]]


\newpage
[[section: NRF24L01]]
โมดูล NRF24L01 ตามภาพที่2.8เป็นโมดูลสื่อสารไร้สาย ซึ่งสามารถนำมาต่อกับ Arduino เพื่อทำการสื่อสารระหว่าง Arduino ด้วยกัน ซึ่งการส่งจะส่งข้อมูลแบบ Broadcast ซึ่งจะต้องระบช่องการสื่อสารและชื่อของผู้รับ เพื่อจัดการระบุการรับส่งของผู้ส่งและผู้รับ โดยจะส่งข้อมูลกันผ่าน Serial และช่องความถี่ 2.4GHz 
[[image(NRF24L01):sl.jpg|width=0.4|caption=NRF24L01]]
[[section: Infrared]]
    การรับส่งสัญญาณอินฟาเรดจะมีต้องใช้ 2 โมดูลคือ IR Transmitter และ IR Receiver ซึ่งทำหน้าที่เป็นผู้ส่งและผู้รับตามลำดับ โดยการส่งจะมีรูปแบบเหมือนกับรีโมตต่าง ๆ ที่ส่งเป็นสัญญาณเพ้าส์(Pulse) โดยแทนด้วยตัวเลขตามโค้ดด้านล่าง

[[code]]
     9031     4438      617      489      648      486
      649     1587      652      485      647      485
      647      488      646      491      588      565
      647      487      643     1601      634      493
      645     1592      648     1588      647      486
      644      492      646      506      648      487
      648      487      649      484      649      487
      648      489      643      491      647      487
      648      506      645      489      645      490
      646      493      643      487      646      488
      645      488      644      496      646      502
      645      492      645      491      644      496
      639      490      649      486      647      486
      650      485      642      515      647      489
      648      486      649      486      649      473
      649
[[end]]
[[subsection: IR Transmitter]]
    เป็นโมดูลที่ไว้ใช้ส่งสัญญาณอินฟาเรด ตามภาพที่ 2.10 

[[image(IRTransmitter):irtransmitter.jpg|width=0.29|caption=IRTransmitter]]

[[subsection: IR  Receiver ]]
    เป็นโมดูลที่ไว้รับสัญญาณอินฟาเรด ตามภาพที่ 2.11
[[image(IRReceiver):irreceiver.jpg|width=0.29|caption=IR Receiver]]