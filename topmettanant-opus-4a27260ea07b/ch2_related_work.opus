% อธิบายรายละเอียดเกี่ยวกับความรู้พื้นฐานด้านต่าง ๆ ที่เกี่ยวข้องกับเนื้องาน
% รวมทั้งกล่าวถึงงานที่มีคนพัฒนามาก่อนที่มีลักษณะใกล้เคียงกันโดยวิเคราะห์ข้อดีข้อเสียด้วย
% แยกเป็นหัวข้อตามความเหมาะสมของโครงงาน

% การแยกหัวข้อนี้เป็นเพียงตัวอย่างสำหรับตัวอย่างโครงงานหนึ่งเท่านั้น

ในการดำเนินการจัดทำโครงการ เรื่อง ระบบควบคุมเครื่องใช้ไฟฟ้าภายในบ้านผ่านแอปพลิเคชัน ผู้จัดทำได้ทำศึกษาหลักการทฤษฏี และเทคโนโลยีต่าง ๆ ที่เกี่ยวข้องกับ
ความสามารนำมาประยุกต์ใช้ในการพัฒนาระบบ ซึ่งประกอบไปด้วยหัวข้อต่าง ๆ ดังนี้


[[section: Python Language]]
	ภาษาไพธอน(Python)เป็นภาษาโปรแกรมคอมพิวเตอร์ระดับสูงที่มีโครงสร้างของภาษาที่ไม่ซับซ้อนทำให้ง่ายต่อการเรียนรู้ และสามารถทำงานร่วมกับภาษาโปรแกรมอื่น ๆ ได้หลายภาษา และยังเป็นภาษาสคริปต์ (Scripting Language)ทำให้ใช้เวลาในการเขียนและคอมไพล์ไม่มาก นอกจากนี้ยังมีเฟรมเวิร์ค(Framework)ที่สามารถใช้สร้างเว็บเซอร์วิส(Web Service)ได้คือ Flask Framework
	[[subsection: Flask Framework]]
	Flask เป็นเฟรมเวิร์คหนึ่งของภาษาไพธอน ที่ช่วยให้เราสามารถเขียน python web application ได้ ซึ่งจุดเด่นของ Flask คือความเรียบง่ายและความยืดหยุ่น และเหมาะสำหรับแอพพลิ-เคชั่นที่ทำงานหน้าเดียว โดยจะมีตัวอย่างดังนี้ 
	
	\newpage


	[[code]]
from flask import Flask
app = Flask(__name__)

@app.route("/on_air/")
def on_air():
   rtn =subprocess.call(["irsend", "SENDONCE", "REMOTEAIR", "AIRON"])

if __name__ == "__main__":
    app.run(host='0.0.0.0')

[[end]]

จากตัวอย่างด้านบน เมื่อรันแล้วจะได้เว็บเซอร์วิสที่สามรถเรียกใช้ผ่าน URL เช่นต้องการเรียกใช้งานฟังก์ชัน(Function) on\_air ก็สามารถเรียก http://<ip address>:5000/on\_air และหากต้องการเพิ่มการเรียกใช้งานเพิ่มเติม ก็สารามารถเพิ่ม @app.route("/pathที่ต้องการ") ได้เลย 


[[section: Android]]
	แอนดรอยด์เป็นระบบปฏิบัติการบนอุปกรณ์พกพาซึ่งเป็นแบบโอเพนซอร์ซ(Open Source) โดยสามารถนำไปพัฒนาเพิ่มเติมเสริมแต่งได้ โดยสามารถสร้างแอปพลิเคชันจากภาษาโปรแกรมจาวา(Java) และภาษาโปรแกรมเอกซ์เอ็มแอล(XML)
	 [[subsection: Java Language]]
	ภาษาจาวาเป็นภาษาสำหรับเขียนโปรแกรมที่สนับสนุนการเขียนโปรแกรมเชิงวัตถุ (OOP:Object-Oriented Programming) โดยโปรแกรมที่เขียนขึ้นถูกสร้างภายในคลาส(Class) และแต่ละคลาสคือที่เก็บเมทอด(Method) โดยสามารถใช้เขียนในส่วนของการทำงานในแอปพลิเคชันได้ ซึ่งใช้ Android Studio ในการพัฒนา

	[[subsection: XML Language]]
	ภาษาเอกซ์เอ็มแอล(Extensible Markup Language) ใช้กำหนดภาพแบบของคำสั่งภาษาแบบ Meta Data ซึ่งมีโครงสร้างที่ประกอบด้วยแท็กเปิด และแท็กปิด เช่นเดียวกับภาษา HTML แต่ภาษา XML คุณสามารถสร้างแท็กรวมทั้งกำหนดโครงสร้างของข้อมูลได้เอง ซึ่งสามารถนำไปใช้ในการสร้าง layout ของแอนดรอยด์แอปพลิเคชันได้


[[subsection: ListView]]
	ListView เป็น ไลบรารี่(Library) ที่ช่วยจัดการในการแสดงข้อมูลที่เป็นลิสต์(List) ให้แสดงเป็นแถว(Row) ซึ่งแต่ละแถวจะมี layout ตามที่ออกแบบไว้ โดยมีตัวอย่างดังนี้

โค้ดตัวอย่างของการจองพื้นนี้ให้ listview ในไฟล์ .xml
[[code]]
<ListView
            android:id="@+id/listView"
            android:layout_width = "500dp"
            android:layout_height ="500dp">
</ListView>
[[end]]


โค้ดตัวอย่างของการจัดการการแสดงผลใน listview
[[code]]
public class listAdapter extends BaseAdapter {
    @Override
    public int getCount() {
        return 0;
    }

    @Override
    public Object getItem(int position) {
        return null;
    }

    @Override
    public long getItemId(int position) {
        return 0;
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        return null;
    }
}
[[end]]
 

\newpage
โค้ดตัวอย่างของการเรียกใช้ listview มาทำงานในภาษาจาวาและแสดงผล
[[code]]
 ListView listView = (ListView) rootView.findViewById(R.id.listView);
 ListAdapter listAdapter = new ListAdapter();
 listView.setAdapter(listAdapter);
[[end]]

[[subsection: Android Voice Recognition]]

    Android Voice Recognition คือการที่นำเสียงของผู้ใช้มาประมวลผล เพื่อทำให้รับรู้ได้ว่าผู้ใช้นั้นพูดคำว่าอะไร ซึ่งในระบบของแอนดรอยด์จะมีไลบรารี่ที่พํมนาโดย Google ซึ่งมีโค้ดตัวอย่างดังนี้
[[code]]
public class MainActivity extends Activity implements View.OnClickListener {
    private final static int REQUEST_VOICE_RECOGNITION = 10001;

    private void callVoiceRecognition() {
        Intent intent = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);
        startActivityForResult(intent, REQUEST_VOIC_RECOGINITION);
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);     
    }
}
[[end]]

[[section: iOS]]
	ไอโอเอสเป็นระบบปฏิบัติการบนอุปกรณ์พกพาซึ่ง พัฒนาและจำหน่ายโดยบริษัทแอปเปิ้ล ซึ่งมี HomeKit เป็นแพลตฟอร์ม(Platform)หนึ่งของระบบปฏิบัติการไอโอเอส เพื่อใช้ในการสื่อสารและควบคุมอุปกรณ์ไฟฟ้าภายในบ้านผ่าน Siri โดยใช้โปรโตคอล(Protocol)ชื่อว่า HomeKit Accessory Protocol ซึ่งเป็นโปรโตคอลเฉพาะที่ใช้ในการสื่อสารกับเว็บเซอร์วิสที่สพัฒนาจาก Node JSซึ่งเป็นแพลตฟอร์มของภาษาจาวาสคริป(JavaScript)



[[section: Firebase Realtime Database ]]
	เป็น NoSQL Cloud Database ที่เก็บข้อมูลในรูปแบบของเจสัน(JSON) และมีการ sync ข้อมูลแบบ real time กับทุกอุปกรณ์ที่เชื่อมต่อแบบอัตโนมัติในเสี้ยววินาที นอกจากนี้ยังมีระบบ Authentication ให้ใช้งานได้ง่ายมากขึ้น [[cite(Firebase)]] ซึ่งมีโครงสร้างดังภาพที่ 2.1 และมีตัวอย่างการใช้งานใน Android Studio ดังนี้

	โค้ดในส่วนของการอ่านข้อมูลจาก firebase เข้าแอพพลิเคชัน
[[code]]
mRootRef.addListenerForSingleValueEvent(new ValueEventListener() {
@Override
public void onDataChange(DataSnapshot dataSnapshot) {
//To do here     
}
@Override
public void onCancelled(DatabaseError databaseError) {
//To do here 
}
});
[[end]]
\newpage
โค้ดในส่วนของการเชื่อมต่อแอพพลิเคชัน
[[code]]
DatabaseReference mRootRef = FirebaseDatabase.getInstance().getReference();
[[end]]

โค้ดในส่วนของการเขียนข้อมูลลง firebase 
[[code]]
mRootRef.setValue();
[[end]]
	[[image(firebase):firebase.png|width=1|caption=โครงสร้างข้อมูลของ Firebase]]

	ซึ่งการที่การอ่านข้อมูลหรือการเขียนข้อมูลใน firebase จะต้องทำข้อมูลให้เป็นฟอร์แมตใดก็ได้ โดยในการเขียนการอ่านจะต้องใช้ฟอร์แมตเดียวกันเท่านั้นซึ่งในโครงงานนี้จะใช้ฟอร์แมตเจสันที่สามารถอ่านเข้าใจได้ง่าย

[[section: Raspberry Pi]]
	จากภาพ 2.2 เป็นบอร์ดคอมพิวเตอร์ขนาดเล็กที่สามารถเชื่อมต่อกับจอมอนิเตอร์ คีย์บอร์ด และเมาส์ได้ สามารถนำมาประยุกต์ใช้ในการทำโครงงานทางด้านอิเล็กทรอนิกส์ การเขียนโปรแกรม หรือเป็นเครื่องคอมพิวเตอร์ตั้งโต๊ะขนาดเล็ก ไม่ว่าจะเป็นการทำงาน Spreadsheet Word Processing ท่องอินเทอร์เน็ต ส่งอีเมลล์ หรือเล่นเกมส์ อีกทั้งยังสามารถเล่นไฟล์วีดีโอความละเอียดสูง (High-Definition) ได้อีกด้วย
บอร์ด Raspberry Pi รองรับระบบปฏิบัติการลินุกซ์ (Linux Operating System) ได้หลายระบบ เช่น Raspbian (Debian) Pidora (Fedora) และ Arch Linux เป็นต้น โดยติดตั้งบน SD Card บอร์ด Raspberry Pi นี้ถูกออกแบบมาให้มี CPU GPU และ RAM อยู่ภายในชิฟเดียวกัน มีจุดเชื่อมต่อ GPIO ให้ผู้ใช้สามารถนำไปใช้ร่วมกับอุปกรณ์อิเล็กทรอนิกส์อื่นๆ ได้อีกด้วย
คุณสมบัติที่สำคัญของ Raspberry Pi 3 ได้แก่

[[ulist]]
#CPU: Quad-core 1.2 GHz ARM Cortex-A53 แบบ 64 bits
#GPU: Broadcom VideoCore IV @ 400 MHz
#Memory ขนาด 1 GB (LPDDR2-900 SDRAM)
#หน่วยความจุแบบ MicroSD
#4 USB ports
#1 Ethernet port
#802.11n Wireless LAN
#Bluetooth 4.0
#รองรับ HDMI/Composite ผ่านทาง RCA Jack
#GPIO 40 pins
[[end]]
[[image(raspberrypi):raspberrypi.png|width=0.8|caption=Raspberry Pi]]

\newpage
[[section: Light Dependent Resistor]]
เซ็นเซอร์แสง (Optical Sensor) คืออุปกรณ์อิเล็กทรอนิกส์ที่เปลี่ยนแปลงค่าความต้านทาน หรือการนำไฟฟ้า ที่ไหลผ่านตัวมันได้ เมื่อมีแสงมาตกกระทบ มีหลายชนิด  ตัวต้านทานแปรค่าตามแสง หรือ LDR (ย่อมาจาก Light Dependent Resistor) คืออุปกรณ์อิเล็กทรอนิกส์ที่ใช้ตรวจจับแสง โดยหามีแสงมาตกกระทบน้อย จะทำให้มีความต้านทานมาก และหากมีแสงมาตกกระทบมาก ความต้านทานจะน้อยลงLDR นั้นทำมาจากสารกึงตัวนำแคดเมียมซัลไฟล์ (Cds) หรือแคดเมียมซีลิไนด์ (Cdse) นำมาฉาบลงบนแผ่นเซรามิคที่ใช้เป็นฐานรอง ลักษณะตามภาพ 2.3
[[image(LDR):LDR.jpg|width=0.6|caption=Light Dependent Resistor]]
[[section: ไอซีเบอร์ DS1820]]
DS18B20 เป็น IC วัดอุณหภูมิแบบดิจิตอล ของ Dallas Semiconductor สามารถวัดอุณหภูมิเป็นหน่วยองศา C ในช่วง -55C ถึง 125C ที่ความละเอียด 9-12 บิต และมีความแม่นยำอยู่ที่ 0.5C ในช่วง -10C ถึง 85C ในกรณีที่เป็นตัวถังแบบ TO-92 นั้นจะมีโครงสร้าง และขาดังแสดงในภาพที่ 1

การสื่อสารและควบคุม DS18B20 นั้นสามารถทำได้โดยใช้บัสข้อมูลแบบ 1-wire ของ Dallas Semiconductor ซึ่งใช้สายสัญญาณเพียงแค่เส้นเดียวเท่านั้น ภายใน DS18B20 แต่ละตัวมีโค๊ดประจำตัวขนาด 64 บิต ทำให้สามารถใช้งาน DS18B20 หลายตัวทำงานบนบัสแบบ 1 wire พร้อมกันได้ นอกจากนี้ DS18B20 ยังสามารถทำงานในโหมดพาราสิต (Parasite Power Mode) ซึ่งเป็นการทำงานโดยไม่ใช้ไฟเลี้ยง แต่ใช้พลังงานจากสายสัญญาณ 1-wire ซึ่งมีประโยชน์มากสำหรับการวัดอุณหภูมิระยะไกล หรือในการใช้งานในที่ ๆ มีเนื้อที่จำกัด แต่ในบทความนี้จะกล่าวถึงรายละเอียดการใช้งานขั้นพื้นฐานในโหมดธรรมดาเท่านั้น ลักษณะตามภาพ 2.4 
[[image(icds1802):icds18202.gif|width=0.6|caption=ไอซีเบอร์ DS1820]]
[[section: รีเลย์ (Relay) ]]

เป็นอุปกรณ์ที่เปลี่ยนพลังงานไฟฟ้าให้เป็นพลังงานแม่เหล็ก เพื่อใช้ในการดึงดูดหน้าสัมผัสของ(contact)ให้เปลี่ยนสภาวะ โดยการป้อนกระแสไฟฟ้าให้กับขดลวด เพื่อทำการปิดหรือเปิดหน้าสัมผัสคล้ายกับสวิตช์อิเล็กทรอนิกส์ ซึ่งเราสามารถนำรีเลย์ไปประยุกต์ใช้ ในการควบคุมวงจรต่าง ๆ ในงานช่างอิเล็กทรอนิกส์มากมายรีเลย์ ลักษณะตามภาพ 2.5 ประกอบด้วยส่วนสำคัญ 2 ส่วนหลักก็คือ
[[list]]
#ส่วนของขดลวด (coil) เหนี่ยวนำกระแสต่ำ ทำหน้าที่สร้างสนามแม่เหล็กไฟฟ้าให้แกนโลหะไปกระทุ้งให้หน้าสัมผัสต่อกัน ทำงานโดยการรับแรงดันจากภายนอกต่อคร่อมที่ขดลวดเหนี่ยวนำนี้ เมื่อขดลวดได้รับแรงดัน(ค่าแรงดันที่รีเลย์ต้องการขึ้นกับชนิดและรุ่นตามที่ผู้ผลิตกำหนด) จะเกิดสนามแม่เหล็กไฟฟ้าทำให้แกนโลหะด้านในไปกระทุ้งให้แผ่นหน้าสัมผัสต่อกัน
#ส่วนของหน้าสัมผัส (contact) ทำหน้าที่เหมือนสวิตช์จ่ายกระแสไฟให้กับอุปกรณ์ที่เราต้องการนั่นเอง
[[end]]
[[image(relay):relay.jpg|width=0.6|caption=รีเลย์ (Relay)]]
*จุดต่อใช้งานมาตรฐาน ประกอบด้วย* (ตามภาพที่ 2.6)
[[list]]
#จุดต่อ NC ย่อมาจาก normal close หมายความว่าปกติดปิด หรือ หากยังไม่จ่ายไฟให้ขดลวดเหนี่ยวนำหน้าสัมผัสจะติดกัน โดยทั่วไปเรามักต่อจุดนี้เข้ากับอุปกรณ์หรือเครื่องใช้ไฟฟ้าที่ต้องการให้ทำงานตลอดเวลาเช่น

#จุดต่อ NO ย่อมาจาก normal open หมายความว่าปกติเปิด หรือหากยังไม่จ่ายไฟให้ขดลวดเหนี่ยวนำหน้าสัมผัสจะไม่ติดกัน โดยทั่วไปเรามักต่อจุดนี้เข้ากับอุปกรณ์หรือเครื่องใช้ไฟฟ้าที่ต้องการควบคุมการเปิดปิดเช่นโคมไฟสนามหรือหน้าบ้าน

#จุดต่อ C ย่อมากจาก common คือจุดร่วมที่ต่อมาจากแหล่งจ่ายไฟ
[[end]]
[[image(relayCircuit):relayCircuit.jpg|width=0.6|caption=Relay Circuit]]

[[section: Arduino]]
Arduino เป็นบอร์ดไมโครคอนโทรเลอร์ตระกูล AVR ที่มีการพัฒนาแบบ Open Sourceคือมีการเปิดเผยข้อมูลทั้งด้าน Hardware และ Software ตัว บอร์ด Arduino ถูกออกแบบมาให้ใช้งานได้ง่าย ดังนั้นจึงเหมาะสำหรับผู้เริ่มต้นศึกษา ทั้งนี้ผู้ใช้งานยังสามารถดัดแปลง เพิ่มเติม พัฒนาต่อยอดทั้งตัวบอร์ด หรือโปรแกรมต่อได้อีกด้วย

ความง่ายของบอร์ด Arduino ในการต่ออุปกรณ์เสริมต่างๆ คือผู้ใช้งานสามารถต่อวงจรอิเล็กทรอนิคส์จากภายนอกแล้วเชื่อมต่อเข้ามาที่ขา I/O ของบอร์ด (ดูตัวอย่างภาพที่ 2.7) หรือเพื่อความสะดวกสามารถเลือกต่อกับบอร์ดเสริม (Arduino Shield) ประเภทต่างๆ(ดูตัวอย่างภาพที่ 2.8)เช่น Arduino XBee Shield, Arduino Music Shield, Arduino Relay Shield, Arduino Wireless Shield, Arduino GPRS Shield เป็นต้น มาเสียบกับบอร์ดบนบอร์ด Arduino แล้วเขียนโปรแกรมพัฒนาต่อได้เลย

[[image(android1):arduino1.png|width=0.5|caption=Anduino + LED]]
[[image(android2):arduino2.png|width=0.5|caption=Anduino + XBee]]

\newpage
[[section: NRF24L01]]
โมดูล NRF24L01 เป็นโมดูลสื่อสารไร้สาย ที่สามารถเขียนโปรแกรมให้เป็นได้ ทั้งตัวรับและตัวส่ง ตามภาพที่ 2.9 สามารถใช้กับ Arduino ได้หลาย ๆ ตัวพร้อมกัน มีความเร็ว 2.4G จึงสื่อสารได้รวดเร็วและไม่ต้องการเสาอากาศที่ยาว มีขนาดเล็กสะดวกในการต่อใช้งาน สามารถประยุกต์ใช้งานได้หลายอย่างเช่น  อุณหภูมิ ความชื้น การแจ้งเตือนต่าง ๆ ได้ในระยะ 1-100 เมตร โมดูลนี้ใช้ชิฟ  nRF24L01+ m ทำงานด้วยความเร็วสูง High-speed SPI interface ใช้พลังงานต่ำ รองรับการทำงานร่วมกับ Arduino 
[[image(NRF24L01):sl.jpg|width=0.4|caption=NRF24L01]]

[[section: IR Transmitter]]
	เป็นโมดูลที่ไว้ส่งสัญญาณอินฟาเรด ตามภาพที่ 2.10 ที่ความยาวคลื่น 940 นาโนเมตร

[[image(IRTransmitter):irtransmitter.jpg|width=0.29|caption=IRTransmitter]]

[[section: IR  Receiver ]]
	เป็นโมดูลที่ไว้รับสัญญาณอินฟาเรด ตามภาพที่ 2.11
[[image(IRReceiver):irreceiver.jpg|width=0.29|caption=IR Receiver]]
